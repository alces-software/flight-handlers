#!/bin/bash
################################################################################
##
## Alces Clusterware - Handler hook
## Copyright (C) 2015-2016 Stephen F. Norledge and Alces Software Ltd.
##
################################################################################
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_write_configuration() {
    ruby_run <<RUBY
require 'yaml'

def write_file(name, content)
  File.write("${cw_ROOT}/etc/config/cluster-appliances/#{name}",content)
end

config = YAML.load_file('${cw_ROOT}/etc/config.yml')['cluster']['appliances'] || {}

appliances_vars = []
config.each do |k,v|
  appliances_vars << %(cw_APPLIANCES_#{k}_ADDRESS="#{v}")
end
write_file('cluster-appliances.rc', appliances_vars.join("\n"))
RUBY
}

_enable_alces_flight_www() {
    local role certname
    role="$1"
    files_load_config config config/cluster

    certname="${role}.${cw_CLUSTER_name}"

    cat <<ENDCONF > "${cw_ROOT}"/etc/alces-flight-www.rc
cw_ALCES_FLIGHT_WWW_ssl_strategy=allocate
cw_ALCES_FLIGHT_WWW_ssl_name=${certname}
ENDCONF

    "${cw_ROOT}"/bin/alces service enable alces-flight-www
    if distro_start_service clusterware-alces-flight-www; then
        echo "Flight WWW service started"
    else
        echo "Unable to start Flight WWW service"
    fi
}

_fulfil_appliance_role() {
    local role
    role="$1"
    if [[ "${cw_INSTANCE_tag_APPLIANCE_ROLES}" == *":${role}:"* ]]; then
        "${cw_ROOT}"/bin/alces service enable appliance/alces-${role}-manager/base
        if distro_start_service alces-${role}-manager; then
            echo "Flight appliance service started: ${role}"
        else
            echo "Unable to start Flight appliance service: ${role}"
        fi

        _enable_alces_flight_www "$role"
   fi
}

_fulfil_endpoint_role() {
    local role port
    role="$1"
    port="$2"
    files_load_config --optional cluster-appliances
    naming_issue_self_signed_cert "${role}.$(hostname -f)" \
                                  "Alces Appliance Endpoint (${role})" \
                                  "${cw_ROOT}"/etc/ssl/alces-${role}-manager-daemon
    "${cw_ROOT}"/bin/alces service enable alces-${role}-manager-daemon ${port}
}

main() {
    # Bail out if we're already configured (this is a reboot)
    if [ -d "${cw_ROOT}/etc/config/cluster-appliances" ]; then
        exit 0
    fi

    mkdir -p "${cw_ROOT}/etc/config/cluster-appliances"

    files_load_config instance config/cluster

    if [[ "${cw_INSTANCE_tag_STORAGE_ROLES}" == *":master:"* ]] ||
      [[ "${cw_INSTANCE_tag_ACCESS_ROLES}" == *":master:"* ]]; then
        _write_configuration
    fi

    if [[ "${cw_INSTANCE_tag_STORAGE_ROLES}" == *":master:"* ]]; then
        _fulfil_endpoint_role "storage" "${cw_INSTANCE_tag_STORAGE_DAEMON_PORT:-25268}"
        if [ "${cw_APPLIANCES_storage_SKIP_DEFAULTS}" != "true" ]; then
            "${cw_ROOT}"/bin/alces service install clusterware-storage
            "${cw_ROOT}"/bin/alces storage enable posix
            echo -e "Home\n%#{dir}\n" | "${cw_ROOT}"/bin/alces storage configure --system home posix
            "${cw_ROOT}"/bin/alces storage use --system home
        fi
    fi

    if [[ "${cw_INSTANCE_tag_ACCESS_ROLES}" == *":master:"* ]]; then
        _fulfil_endpoint_role "access" "${cw_INSTANCE_tag_ACCESS_DAEMON_PORT:-25269}"
        "${cw_ROOT}"/bin/alces service enable alces-flight-www/websocket-proxy
    fi

    if [[ "${cw_INSTANCE_role}" == "appliance" ]]; then
        _fulfil_appliance_role storage
        _fulfil_appliance_role access
    fi
}

setup
require handler
require distro
require files
require naming

handler_tee main "$@"
