#!/bin/bash
################################################################################
##
## Alces Clusterware - Handler hook
## Copyright (C) 2016 Stephen F. Norledge and Alces Software Ltd.
##
################################################################################
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_notify_appliance() {
    local port address appliance_type
    port="$1"
    address="$2"
    appliance_type="$3"
    files_load_config config config/cluster
    until curl -ksf "https://localhost/api/v1/${appliance_type}/" > /dev/null; do
        echo "Waiting for ASM webapp to become available..."
        sleep 5
    done
    cat <<JSON | webapi_post https://localhost/api/v1/${appliance_type}/register --mimetype application/json -k
{
  "cluster": {
    "name": "${cw_CLUSTER_name}",
    "ip": "${address}",
    "auth_port": ${port},
    "ssl": true
  }
}
JSON
}

_add_storage_master_node() {
    local addr port
    addr="$1"
    port="$2"
    files_load_config --optional cluster-appliances
    cw_APPLIANCES_storage_MANAGER_ROOT="${cw_APPLIANCES_storage_MANAGER_ROOT:-/opt/alces-storage-manager}"
    if [ -f "${cw_ROOT}"/etc/config/cluster-appliances/storage-endpoints.yml ]; then
	echo "Cowardly refusing to reconfigure existing Alces Storage Manager"
    else
	mkdir -p "${cw_APPLIANCES_storage_MANAGER_ROOT}"/webapp/config
	cat <<EOF > "${cw_ROOT}"/etc/config/cluster-appliances/storage-endpoints.yml
---
:endpoints:
- "${addr}:${port}"
EOF
        _notify_appliance "${port}" "${addr}" "storage"
    fi
}

_add_access_master_node() {
    local addr port
    addr="$1"
    port="$2"
    files_load_config --optional cluster-appliances
    cw_APPLIANCES_access_MANAGER_ROOT="${cw_APPLIANCES_access_MANAGER_ROOT:-/opt/alces-access-manager}"
    if [ -f "${cw_ROOT}"/etc/config/cluster-appliances/access-endpoints.yml ]; then
	echo "Cowardly refusing to reconfigure existing Alces Access Manager"
    else
	cat <<EOF > "${cw_ROOT}"/etc/config/cluster-appliances/access-endpoints.yml
---
:endpoints:
- "${addr}:${port}"
EOF
	_notify_appliance "${port}" "${addr}" "clusters"  # Note the hack that means this is 'clusters' not 'access'
    fi
}

main() {
    local appliance_roles dir tags tag tuple key value storage_roles storage_daemon_port access_roles access_daemon_port appliance_url

    files_load_config instance config/cluster
    files_load_config config config/cluster
    eval "$(member_parse)"
    echo "Tags for member ${cw_MEMBER_name} (${cw_MEMBER_ip}): ${cw_MEMBER_tags}"
    IFS=',' read -a tags <<< "${cw_MEMBER_tags}"
    for tag in "${tags[@]}"; do
        IFS='=' read -a tuple <<< "${tag}"
        echo "Found tuple: ${tag}, key: ${tuple[0]}, value: ${tuple[1]}"
        key=${tuple[0]}
        value=${tuple[1]}
        if [ "$key" == "storage_roles" ]; then
            storage_roles="${value}"
        elif [ "$key" == "storage_daemon_port" ]; then
            storage_daemon_port="${value}"
        elif [ "$key" == "access_roles" ]; then
            access_roles="${value}"
        elif [ "$key" == "access_daemon_port" ]; then
            access_daemon_port="${value}"
        elif [ "$key" == "appliance_roles" ]; then
            appliance_roles="$value"
        fi
    done

    if [[ "${cw_INSTANCE_role}" == "appliance" ]]; then
        if [[ "${cw_INSTANCE_tag_APPLIANCE_ROLES}" == *":storage:"* && "${storage_roles}" == *":master:"* ]]; then
            echo "Adding Storage Manager master node: ${cw_MEMBER_name} (${cw_MEMBER_ip}:${storage_daemon_port:-25268})"
            _add_storage_master_node "${cw_MEMBER_ip}" "${storage_daemon_port:-25268}"
        fi
        if [[ "${cw_INSTANCE_tag_APPLIANCE_ROLES}" == *":access:"* && "${access_roles}" == *":master:"* ]]; then
            echo "Adding Access Manager master node: ${cw_MEMBER_name} (${cw_MEMBER_ip}:${access_daemon_port:-25269})"
            _add_access_master_node "${cw_MEMBER_ip}" "${access_daemon_port:-25269}"
        fi
    fi

    if [[ "${appliance_roles}" == *":access:"* ]]; then
      # We need to record the address of the Access appliance, so we can
      # send it screenshots in the `session-screenshot` handler.
      echo "cw_APPLIANCES_access_ADDRESS=${cw_MEMBER_ip}" >> \
        "${cw_ROOT}/etc/config/cluster-appliances/cluster-appliances.rc"
    fi
}

setup
require member
require network
require handler
require files
require distro
require webapi

handler_tee main "$@"
