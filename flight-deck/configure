#!/bin/bash
################################################################################
##
## Alces Clusterware - Handler hook
## Copyright (C) 2016 Stephen F. Norledge and Alces Software Ltd.
##
################################################################################
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

main() {
    # Bail out if we're already configured (this is a reboot)
    if [ -d "${cw_ROOT}/etc/config/flight" ]; then
        exit 0
    fi

    # Bail out if we can't locate the config file
    if [ ! -f "${cw_ROOT}/etc/config.yml" ]; then
        exit 1
    fi

    # Parse YAML file into something useful
    mkdir -p "${cw_ROOT}/etc/config/flight"
    ruby_run <<RUBY
require 'yaml'
require 'json'

def write_file(name, content, *args)
  File.write("${cw_ROOT}/etc/config/flight/#{name}",content,*args)
end

config = YAML.load_file('${cw_ROOT}/etc/config.yml')['instance'] || {}

flight_vars = []
if config['flight'] && config['flight']['uuid']
  flight_vars << %(cw_FLIGHT_instance_uuid="#{config['flight']['uuid']}")
end
write_file('flight.rc', flight_vars.join("\n"))
RUBY
}

setup

require ruby
require handler

handler_tee main "$@"
